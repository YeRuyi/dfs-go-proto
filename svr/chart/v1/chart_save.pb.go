// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: svr/chart/v1/chart_save.proto

package chartv1

import (
	context "context"
	v1 "github.com/YeRuyi/dfs-go-proto/svr/cell/v1"
	v11 "github.com/YeRuyi/dfs-go-proto/svr/ctx/v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// ChartSaveCellDimensionReq 落地图表上下文维度
type ChartSaveCellDimensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension string `protobuf:"bytes,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Member    string `protobuf:"bytes,2,opt,name=member,proto3" json:"member,omitempty"`
	Muser     string `protobuf:"bytes,3,opt,name=muser,proto3" json:"muser,omitempty"`
}

func (x *ChartSaveCellDimensionReq) Reset() {
	*x = ChartSaveCellDimensionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSaveCellDimensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSaveCellDimensionReq) ProtoMessage() {}

func (x *ChartSaveCellDimensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSaveCellDimensionReq.ProtoReflect.Descriptor instead.
func (*ChartSaveCellDimensionReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{0}
}

func (x *ChartSaveCellDimensionReq) GetDimension() string {
	if x != nil {
		return x.Dimension
	}
	return ""
}

func (x *ChartSaveCellDimensionReq) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *ChartSaveCellDimensionReq) GetMuser() string {
	if x != nil {
		return x.Muser
	}
	return ""
}

// ChartSaveCellsReq 图表单元格保存
type ChartSaveCellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells      []*v1.CellSaveEntity         `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	SubCells   []*v1.CellSaveSubEntity      `protobuf:"bytes,2,rep,name=subCells,proto3" json:"subCells,omitempty"`
	UserInfo   *v11.CtxUserInfo             `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Dimensions []*ChartSaveCellDimensionReq `protobuf:"bytes,4,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	Repid      string                       `protobuf:"bytes,5,opt,name=repid,proto3" json:"repid,omitempty"`
}

func (x *ChartSaveCellsReq) Reset() {
	*x = ChartSaveCellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSaveCellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSaveCellsReq) ProtoMessage() {}

func (x *ChartSaveCellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSaveCellsReq.ProtoReflect.Descriptor instead.
func (*ChartSaveCellsReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{1}
}

func (x *ChartSaveCellsReq) GetCells() []*v1.CellSaveEntity {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *ChartSaveCellsReq) GetSubCells() []*v1.CellSaveSubEntity {
	if x != nil {
		return x.SubCells
	}
	return nil
}

func (x *ChartSaveCellsReq) GetUserInfo() *v11.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ChartSaveCellsReq) GetDimensions() []*ChartSaveCellDimensionReq {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ChartSaveCellsReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

// ChartSavedCellsReq 落地表cells查询
type ChartSavedCellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid    string           `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Repldid  string           `protobuf:"bytes,2,opt,name=repldid,proto3" json:"repldid,omitempty"`
	UserInfo *v11.CtxUserInfo `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Sheetid  string           `protobuf:"bytes,4,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
}

func (x *ChartSavedCellsReq) Reset() {
	*x = ChartSavedCellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSavedCellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSavedCellsReq) ProtoMessage() {}

func (x *ChartSavedCellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSavedCellsReq.ProtoReflect.Descriptor instead.
func (*ChartSavedCellsReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{2}
}

func (x *ChartSavedCellsReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *ChartSavedCellsReq) GetRepldid() string {
	if x != nil {
		return x.Repldid
	}
	return ""
}

func (x *ChartSavedCellsReq) GetUserInfo() *v11.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ChartSavedCellsReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

// ChartSavedSubCellsReq 获取保存的subCells
type ChartSavedSubCellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid    string           `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Repldid  string           `protobuf:"bytes,2,opt,name=repldid,proto3" json:"repldid,omitempty"`
	UserInfo *v11.CtxUserInfo `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Compid   string           `protobuf:"bytes,4,opt,name=compid,proto3" json:"compid,omitempty"`
}

func (x *ChartSavedSubCellsReq) Reset() {
	*x = ChartSavedSubCellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSavedSubCellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSavedSubCellsReq) ProtoMessage() {}

func (x *ChartSavedSubCellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSavedSubCellsReq.ProtoReflect.Descriptor instead.
func (*ChartSavedSubCellsReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{3}
}

func (x *ChartSavedSubCellsReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *ChartSavedSubCellsReq) GetRepldid() string {
	if x != nil {
		return x.Repldid
	}
	return ""
}

func (x *ChartSavedSubCellsReq) GetUserInfo() *v11.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *ChartSavedSubCellsReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

// ChartSavedQueryReq 落地列表查询
type ChartSavedQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimensions []*ChartSaveCellDimensionReq `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
	Repid      string                       `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	UserInfo   *v11.CtxUserInfo             `protobuf:"bytes,3,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
}

func (x *ChartSavedQueryReq) Reset() {
	*x = ChartSavedQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSavedQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSavedQueryReq) ProtoMessage() {}

func (x *ChartSavedQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSavedQueryReq.ProtoReflect.Descriptor instead.
func (*ChartSavedQueryReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{4}
}

func (x *ChartSavedQueryReq) GetDimensions() []*ChartSaveCellDimensionReq {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *ChartSavedQueryReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *ChartSavedQueryReq) GetUserInfo() *v11.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

// ChartSavedDimensionReq 获取落地信息
type ChartSavedDimensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repldid []string `protobuf:"bytes,1,rep,name=repldid,proto3" json:"repldid,omitempty"`
}

func (x *ChartSavedDimensionReq) Reset() {
	*x = ChartSavedDimensionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_save_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSavedDimensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSavedDimensionReq) ProtoMessage() {}

func (x *ChartSavedDimensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_save_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSavedDimensionReq.ProtoReflect.Descriptor instead.
func (*ChartSavedDimensionReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_save_proto_rawDescGZIP(), []int{5}
}

func (x *ChartSavedDimensionReq) GetRepldid() []string {
	if x != nil {
		return x.Repldid
	}
	return nil
}

var File_svr_chart_v1_chart_save_proto protoreflect.FileDescriptor

var file_svr_chart_v1_chart_save_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x73,
	0x76, 0x72, 0x2f, 0x63, 0x74, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x74, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x67,
	0x0a, 0x19, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x75, 0x73, 0x65, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a,
	0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53,
	0x61, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x3a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x61, 0x76, 0x65, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64,
	0x22, 0x93, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x64, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x64, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x64, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x22, 0xa8, 0x01,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x64, 0x69, 0x64, 0x32, 0xf6, 0x03, 0x0a,
	0x0c, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x53, 0x76, 0x72, 0x12, 0x48, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x61, 0x6e, 0x53, 0x61, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x23, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x59, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6e, 0x74,
	0x65, 0x63, 0x68, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x32, 0x42,
	0x0a, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x53, 0x61, 0x76, 0x65, 0x5a, 0x33, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x65, 0x52, 0x75, 0x79, 0x69, 0x2f, 0x64,
	0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x76, 0x72, 0x2f,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svr_chart_v1_chart_save_proto_rawDescOnce sync.Once
	file_svr_chart_v1_chart_save_proto_rawDescData = file_svr_chart_v1_chart_save_proto_rawDesc
)

func file_svr_chart_v1_chart_save_proto_rawDescGZIP() []byte {
	file_svr_chart_v1_chart_save_proto_rawDescOnce.Do(func() {
		file_svr_chart_v1_chart_save_proto_rawDescData = protoimpl.X.CompressGZIP(file_svr_chart_v1_chart_save_proto_rawDescData)
	})
	return file_svr_chart_v1_chart_save_proto_rawDescData
}

var file_svr_chart_v1_chart_save_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_svr_chart_v1_chart_save_proto_goTypes = []interface{}{
	(*ChartSaveCellDimensionReq)(nil), // 0: svr.chart.v1.ChartSaveCellDimensionReq
	(*ChartSaveCellsReq)(nil),         // 1: svr.chart.v1.ChartSaveCellsReq
	(*ChartSavedCellsReq)(nil),        // 2: svr.chart.v1.ChartSavedCellsReq
	(*ChartSavedSubCellsReq)(nil),     // 3: svr.chart.v1.ChartSavedSubCellsReq
	(*ChartSavedQueryReq)(nil),        // 4: svr.chart.v1.ChartSavedQueryReq
	(*ChartSavedDimensionReq)(nil),    // 5: svr.chart.v1.ChartSavedDimensionReq
	(*v1.CellSaveEntity)(nil),         // 6: svr.cell.v1.CellSaveEntity
	(*v1.CellSaveSubEntity)(nil),      // 7: svr.cell.v1.CellSaveSubEntity
	(*v11.CtxUserInfo)(nil),           // 8: svr.ctx.v1.CtxUserInfo
	(*v11.BaseResponse)(nil),          // 9: svr.ctx.v1.BaseResponse
}
var file_svr_chart_v1_chart_save_proto_depIdxs = []int32{
	6,  // 0: svr.chart.v1.ChartSaveCellsReq.cells:type_name -> svr.cell.v1.CellSaveEntity
	7,  // 1: svr.chart.v1.ChartSaveCellsReq.subCells:type_name -> svr.cell.v1.CellSaveSubEntity
	8,  // 2: svr.chart.v1.ChartSaveCellsReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	0,  // 3: svr.chart.v1.ChartSaveCellsReq.dimensions:type_name -> svr.chart.v1.ChartSaveCellDimensionReq
	8,  // 4: svr.chart.v1.ChartSavedCellsReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	8,  // 5: svr.chart.v1.ChartSavedSubCellsReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	0,  // 6: svr.chart.v1.ChartSavedQueryReq.dimensions:type_name -> svr.chart.v1.ChartSaveCellDimensionReq
	8,  // 7: svr.chart.v1.ChartSavedQueryReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	8,  // 8: svr.chart.v1.ChartSaveSvr.getChartCanSaveList:input_type -> svr.ctx.v1.CtxUserInfo
	4,  // 9: svr.chart.v1.ChartSaveSvr.getChartSavedList:input_type -> svr.chart.v1.ChartSavedQueryReq
	1,  // 10: svr.chart.v1.ChartSaveSvr.setSaveChart:input_type -> svr.chart.v1.ChartSaveCellsReq
	2,  // 11: svr.chart.v1.ChartSaveSvr.getSaveChartCells:input_type -> svr.chart.v1.ChartSavedCellsReq
	3,  // 12: svr.chart.v1.ChartSaveSvr.getSaveChartSubCells:input_type -> svr.chart.v1.ChartSavedSubCellsReq
	5,  // 13: svr.chart.v1.ChartSaveSvr.getSavedChartDimension:input_type -> svr.chart.v1.ChartSavedDimensionReq
	9,  // 14: svr.chart.v1.ChartSaveSvr.getChartCanSaveList:output_type -> svr.ctx.v1.BaseResponse
	9,  // 15: svr.chart.v1.ChartSaveSvr.getChartSavedList:output_type -> svr.ctx.v1.BaseResponse
	9,  // 16: svr.chart.v1.ChartSaveSvr.setSaveChart:output_type -> svr.ctx.v1.BaseResponse
	9,  // 17: svr.chart.v1.ChartSaveSvr.getSaveChartCells:output_type -> svr.ctx.v1.BaseResponse
	9,  // 18: svr.chart.v1.ChartSaveSvr.getSaveChartSubCells:output_type -> svr.ctx.v1.BaseResponse
	9,  // 19: svr.chart.v1.ChartSaveSvr.getSavedChartDimension:output_type -> svr.ctx.v1.BaseResponse
	14, // [14:20] is the sub-list for method output_type
	8,  // [8:14] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_svr_chart_v1_chart_save_proto_init() }
func file_svr_chart_v1_chart_save_proto_init() {
	if File_svr_chart_v1_chart_save_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svr_chart_v1_chart_save_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSaveCellDimensionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_save_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSaveCellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_save_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSavedCellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_save_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSavedSubCellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_save_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSavedQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_save_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSavedDimensionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svr_chart_v1_chart_save_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svr_chart_v1_chart_save_proto_goTypes,
		DependencyIndexes: file_svr_chart_v1_chart_save_proto_depIdxs,
		MessageInfos:      file_svr_chart_v1_chart_save_proto_msgTypes,
	}.Build()
	File_svr_chart_v1_chart_save_proto = out.File
	file_svr_chart_v1_chart_save_proto_rawDesc = nil
	file_svr_chart_v1_chart_save_proto_goTypes = nil
	file_svr_chart_v1_chart_save_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChartSaveSvrClient is the client API for ChartSaveSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChartSaveSvrClient interface {
	// getChartCanSaveList 获取可以落地的列表
	GetChartCanSaveList(ctx context.Context, in *v11.CtxUserInfo, opts ...grpc.CallOption) (*v11.BaseResponse, error)
	// getChartSavedList 获取已经落地的列表
	GetChartSavedList(ctx context.Context, in *ChartSavedQueryReq, opts ...grpc.CallOption) (*v11.BaseResponse, error)
	// setSaveChart 落地图表
	SetSaveChart(ctx context.Context, in *ChartSaveCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error)
	// getSaveChartCells 获取落地表单元格信息
	GetSaveChartCells(ctx context.Context, in *ChartSavedCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error)
	// getSaveChartSubCells 获取保存的subCells
	GetSaveChartSubCells(ctx context.Context, in *ChartSavedSubCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error)
	// getSavedChartDimension 获取落地后表格维度信息
	GetSavedChartDimension(ctx context.Context, in *ChartSavedDimensionReq, opts ...grpc.CallOption) (*v11.BaseResponse, error)
}

type chartSaveSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewChartSaveSvrClient(cc grpc.ClientConnInterface) ChartSaveSvrClient {
	return &chartSaveSvrClient{cc}
}

func (c *chartSaveSvrClient) GetChartCanSaveList(ctx context.Context, in *v11.CtxUserInfo, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/getChartCanSaveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSaveSvrClient) GetChartSavedList(ctx context.Context, in *ChartSavedQueryReq, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/getChartSavedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSaveSvrClient) SetSaveChart(ctx context.Context, in *ChartSaveCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/setSaveChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSaveSvrClient) GetSaveChartCells(ctx context.Context, in *ChartSavedCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/getSaveChartCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSaveSvrClient) GetSaveChartSubCells(ctx context.Context, in *ChartSavedSubCellsReq, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/getSaveChartSubCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSaveSvrClient) GetSavedChartDimension(ctx context.Context, in *ChartSavedDimensionReq, opts ...grpc.CallOption) (*v11.BaseResponse, error) {
	out := new(v11.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSaveSvr/getSavedChartDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartSaveSvrServer is the server API for ChartSaveSvr service.
type ChartSaveSvrServer interface {
	// getChartCanSaveList 获取可以落地的列表
	GetChartCanSaveList(context.Context, *v11.CtxUserInfo) (*v11.BaseResponse, error)
	// getChartSavedList 获取已经落地的列表
	GetChartSavedList(context.Context, *ChartSavedQueryReq) (*v11.BaseResponse, error)
	// setSaveChart 落地图表
	SetSaveChart(context.Context, *ChartSaveCellsReq) (*v11.BaseResponse, error)
	// getSaveChartCells 获取落地表单元格信息
	GetSaveChartCells(context.Context, *ChartSavedCellsReq) (*v11.BaseResponse, error)
	// getSaveChartSubCells 获取保存的subCells
	GetSaveChartSubCells(context.Context, *ChartSavedSubCellsReq) (*v11.BaseResponse, error)
	// getSavedChartDimension 获取落地后表格维度信息
	GetSavedChartDimension(context.Context, *ChartSavedDimensionReq) (*v11.BaseResponse, error)
}

// UnimplementedChartSaveSvrServer can be embedded to have forward compatible implementations.
type UnimplementedChartSaveSvrServer struct {
}

func (*UnimplementedChartSaveSvrServer) GetChartCanSaveList(context.Context, *v11.CtxUserInfo) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartCanSaveList not implemented")
}
func (*UnimplementedChartSaveSvrServer) GetChartSavedList(context.Context, *ChartSavedQueryReq) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartSavedList not implemented")
}
func (*UnimplementedChartSaveSvrServer) SetSaveChart(context.Context, *ChartSaveCellsReq) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSaveChart not implemented")
}
func (*UnimplementedChartSaveSvrServer) GetSaveChartCells(context.Context, *ChartSavedCellsReq) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaveChartCells not implemented")
}
func (*UnimplementedChartSaveSvrServer) GetSaveChartSubCells(context.Context, *ChartSavedSubCellsReq) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaveChartSubCells not implemented")
}
func (*UnimplementedChartSaveSvrServer) GetSavedChartDimension(context.Context, *ChartSavedDimensionReq) (*v11.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedChartDimension not implemented")
}

func RegisterChartSaveSvrServer(s *grpc.Server, srv ChartSaveSvrServer) {
	s.RegisterService(&_ChartSaveSvr_serviceDesc, srv)
}

func _ChartSaveSvr_GetChartCanSaveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v11.CtxUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).GetChartCanSaveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/GetChartCanSaveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).GetChartCanSaveList(ctx, req.(*v11.CtxUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSaveSvr_GetChartSavedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartSavedQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).GetChartSavedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/GetChartSavedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).GetChartSavedList(ctx, req.(*ChartSavedQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSaveSvr_SetSaveChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartSaveCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).SetSaveChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/SetSaveChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).SetSaveChart(ctx, req.(*ChartSaveCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSaveSvr_GetSaveChartCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartSavedCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).GetSaveChartCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/GetSaveChartCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).GetSaveChartCells(ctx, req.(*ChartSavedCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSaveSvr_GetSaveChartSubCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartSavedSubCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).GetSaveChartSubCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/GetSaveChartSubCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).GetSaveChartSubCells(ctx, req.(*ChartSavedSubCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSaveSvr_GetSavedChartDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChartSavedDimensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSaveSvrServer).GetSavedChartDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSaveSvr/GetSavedChartDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSaveSvrServer).GetSavedChartDimension(ctx, req.(*ChartSavedDimensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChartSaveSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svr.chart.v1.ChartSaveSvr",
	HandlerType: (*ChartSaveSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getChartCanSaveList",
			Handler:    _ChartSaveSvr_GetChartCanSaveList_Handler,
		},
		{
			MethodName: "getChartSavedList",
			Handler:    _ChartSaveSvr_GetChartSavedList_Handler,
		},
		{
			MethodName: "setSaveChart",
			Handler:    _ChartSaveSvr_SetSaveChart_Handler,
		},
		{
			MethodName: "getSaveChartCells",
			Handler:    _ChartSaveSvr_GetSaveChartCells_Handler,
		},
		{
			MethodName: "getSaveChartSubCells",
			Handler:    _ChartSaveSvr_GetSaveChartSubCells_Handler,
		},
		{
			MethodName: "getSavedChartDimension",
			Handler:    _ChartSaveSvr_GetSavedChartDimension_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svr/chart/v1/chart_save.proto",
}
