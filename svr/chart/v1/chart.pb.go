// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: svr/chart/v1/chart.proto

package chartv1

import (
	context "context"
	v1 "github.com/YeRuyi/dfs-go-proto/svr/ctx/v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Request 请求响应
type UpsertChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Chart   *Chart          `protobuf:"bytes,2,opt,name=chart,proto3" json:"chart,omitempty"`
}

func (x *UpsertChartReq) Reset() {
	*x = UpsertChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertChartReq) ProtoMessage() {}

func (x *UpsertChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertChartReq.ProtoReflect.Descriptor instead.
func (*UpsertChartReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertChartReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UpsertChartReq) GetChart() *Chart {
	if x != nil {
		return x.Chart
	}
	return nil
}

// 对于样式插入的请求
type UpsertStyleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Repid   string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Style   *Style          `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
}

func (x *UpsertStyleReq) Reset() {
	*x = UpsertStyleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStyleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStyleReq) ProtoMessage() {}

func (x *UpsertStyleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStyleReq.ProtoReflect.Descriptor instead.
func (*UpsertStyleReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertStyleReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UpsertStyleReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpsertStyleReq) GetStyle() *Style {
	if x != nil {
		return x.Style
	}
	return nil
}

// 对于状态插入的请求
type UpsertStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Repid   string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Status  *Status         `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpsertStatusReq) Reset() {
	*x = UpsertStatusReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertStatusReq) ProtoMessage() {}

func (x *UpsertStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertStatusReq.ProtoReflect.Descriptor instead.
func (*UpsertStatusReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertStatusReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UpsertStatusReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpsertStatusReq) GetStatus() *Status {
	if x != nil {
		return x.Status
	}
	return nil
}

// 对于实体插入的请求
type UpsertEntityReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Repid   string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Entity  *Entity         `protobuf:"bytes,3,opt,name=entity,proto3" json:"entity,omitempty"`
}

func (x *UpsertEntityReq) Reset() {
	*x = UpsertEntityReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertEntityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertEntityReq) ProtoMessage() {}

func (x *UpsertEntityReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertEntityReq.ProtoReflect.Descriptor instead.
func (*UpsertEntityReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertEntityReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UpsertEntityReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpsertEntityReq) GetEntity() *Entity {
	if x != nil {
		return x.Entity
	}
	return nil
}

// QueryChartReq 查询图表参数
type QueryChartReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	RepId   string          `protobuf:"bytes,2,opt,name=repId,proto3" json:"repId,omitempty"`
}

func (x *QueryChartReq) Reset() {
	*x = QueryChartReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChartReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChartReq) ProtoMessage() {}

func (x *QueryChartReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChartReq.ProtoReflect.Descriptor instead.
func (*QueryChartReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{4}
}

func (x *QueryChartReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *QueryChartReq) GetRepId() string {
	if x != nil {
		return x.RepId
	}
	return ""
}

// QueryChartListReq 查询图表列表参数, 暂不设定where条件，后续按照业务发放
type QueryChartListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *QueryChartListReq) Reset() {
	*x = QueryChartListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChartListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChartListReq) ProtoMessage() {}

func (x *QueryChartListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChartListReq.ProtoReflect.Descriptor instead.
func (*QueryChartListReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{5}
}

func (x *QueryChartListReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

// UpsertDimensionReq  表配置
type UpsertDimensionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context   *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Repid     string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Dimension *Dimension      `protobuf:"bytes,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *UpsertDimensionReq) Reset() {
	*x = UpsertDimensionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertDimensionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertDimensionReq) ProtoMessage() {}

func (x *UpsertDimensionReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertDimensionReq.ProtoReflect.Descriptor instead.
func (*UpsertDimensionReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{6}
}

func (x *UpsertDimensionReq) GetContext() *v1.CtxUserInfo {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *UpsertDimensionReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpsertDimensionReq) GetDimension() *Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

// DropChatReq  表配置
type DropChatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid   string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Sheetid string `protobuf:"bytes,2,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
}

func (x *DropChatReq) Reset() {
	*x = DropChatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropChatReq) ProtoMessage() {}

func (x *DropChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropChatReq.ProtoReflect.Descriptor instead.
func (*DropChatReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{7}
}

func (x *DropChatReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *DropChatReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

// StyleReq 样式请求
type StyleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid   string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Sheetid string `protobuf:"bytes,2,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
}

func (x *StyleReq) Reset() {
	*x = StyleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_chart_v1_chart_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StyleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StyleReq) ProtoMessage() {}

func (x *StyleReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_chart_v1_chart_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StyleReq.ProtoReflect.Descriptor instead.
func (*StyleReq) Descriptor() ([]byte, []int) {
	return file_svr_chart_v1_chart_proto_rawDescGZIP(), []int{8}
}

func (x *StyleReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *StyleReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

var File_svr_chart_v1_chart_proto protoreflect.FileDescriptor

var file_svr_chart_v1_chart_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x74,
	0x78, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x73, 0x76, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x29, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x88, 0x01,
	0x0a, 0x0f, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x58, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x49, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x3d, 0x0a, 0x0b, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64,
	0x22, 0x3a, 0x0a, 0x08, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x32, 0xf3, 0x08, 0x0a,
	0x08, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x76, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x74,
	0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65,
	0x72, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x73, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x52, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12, 0x19, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x13, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x53, 0x68, 0x65, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x54, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6e, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x06, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x65, 0x52, 0x75, 0x79, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x68, 0x61, 0x72, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svr_chart_v1_chart_proto_rawDescOnce sync.Once
	file_svr_chart_v1_chart_proto_rawDescData = file_svr_chart_v1_chart_proto_rawDesc
)

func file_svr_chart_v1_chart_proto_rawDescGZIP() []byte {
	file_svr_chart_v1_chart_proto_rawDescOnce.Do(func() {
		file_svr_chart_v1_chart_proto_rawDescData = protoimpl.X.CompressGZIP(file_svr_chart_v1_chart_proto_rawDescData)
	})
	return file_svr_chart_v1_chart_proto_rawDescData
}

var file_svr_chart_v1_chart_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_svr_chart_v1_chart_proto_goTypes = []interface{}{
	(*UpsertChartReq)(nil),     // 0: svr.chart.v1.UpsertChartReq
	(*UpsertStyleReq)(nil),     // 1: svr.chart.v1.UpsertStyleReq
	(*UpsertStatusReq)(nil),    // 2: svr.chart.v1.UpsertStatusReq
	(*UpsertEntityReq)(nil),    // 3: svr.chart.v1.UpsertEntityReq
	(*QueryChartReq)(nil),      // 4: svr.chart.v1.QueryChartReq
	(*QueryChartListReq)(nil),  // 5: svr.chart.v1.QueryChartListReq
	(*UpsertDimensionReq)(nil), // 6: svr.chart.v1.UpsertDimensionReq
	(*DropChatReq)(nil),        // 7: svr.chart.v1.DropChatReq
	(*StyleReq)(nil),           // 8: svr.chart.v1.StyleReq
	(*v1.CtxUserInfo)(nil),     // 9: svr.ctx.v1.CtxUserInfo
	(*Chart)(nil),              // 10: svr.chart.v1.Chart
	(*Style)(nil),              // 11: svr.chart.v1.Style
	(*Status)(nil),             // 12: svr.chart.v1.Status
	(*Entity)(nil),             // 13: svr.chart.v1.Entity
	(*Dimension)(nil),          // 14: svr.chart.v1.Dimension
	(*v1.BaseResponse)(nil),    // 15: svr.ctx.v1.BaseResponse
}
var file_svr_chart_v1_chart_proto_depIdxs = []int32{
	9,  // 0: svr.chart.v1.UpsertChartReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	10, // 1: svr.chart.v1.UpsertChartReq.chart:type_name -> svr.chart.v1.Chart
	9,  // 2: svr.chart.v1.UpsertStyleReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	11, // 3: svr.chart.v1.UpsertStyleReq.style:type_name -> svr.chart.v1.Style
	9,  // 4: svr.chart.v1.UpsertStatusReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	12, // 5: svr.chart.v1.UpsertStatusReq.status:type_name -> svr.chart.v1.Status
	9,  // 6: svr.chart.v1.UpsertEntityReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	13, // 7: svr.chart.v1.UpsertEntityReq.entity:type_name -> svr.chart.v1.Entity
	9,  // 8: svr.chart.v1.QueryChartReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	9,  // 9: svr.chart.v1.QueryChartListReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	9,  // 10: svr.chart.v1.UpsertDimensionReq.context:type_name -> svr.ctx.v1.CtxUserInfo
	14, // 11: svr.chart.v1.UpsertDimensionReq.dimension:type_name -> svr.chart.v1.Dimension
	0,  // 12: svr.chart.v1.ChartSvr.createChart:input_type -> svr.chart.v1.UpsertChartReq
	2,  // 13: svr.chart.v1.ChartSvr.createStatus:input_type -> svr.chart.v1.UpsertStatusReq
	1,  // 14: svr.chart.v1.ChartSvr.createStyle:input_type -> svr.chart.v1.UpsertStyleReq
	3,  // 15: svr.chart.v1.ChartSvr.createEntity:input_type -> svr.chart.v1.UpsertEntityReq
	6,  // 16: svr.chart.v1.ChartSvr.createDimension:input_type -> svr.chart.v1.UpsertDimensionReq
	4,  // 17: svr.chart.v1.ChartSvr.queryChart:input_type -> svr.chart.v1.QueryChartReq
	5,  // 18: svr.chart.v1.ChartSvr.queryChartList:input_type -> svr.chart.v1.QueryChartListReq
	0,  // 19: svr.chart.v1.ChartSvr.updateChartBaseInfo:input_type -> svr.chart.v1.UpsertChartReq
	2,  // 20: svr.chart.v1.ChartSvr.updateChartStatus:input_type -> svr.chart.v1.UpsertStatusReq
	1,  // 21: svr.chart.v1.ChartSvr.updateChartStyle:input_type -> svr.chart.v1.UpsertStyleReq
	3,  // 22: svr.chart.v1.ChartSvr.updateChartEntity:input_type -> svr.chart.v1.UpsertEntityReq
	6,  // 23: svr.chart.v1.ChartSvr.updateChartDimension:input_type -> svr.chart.v1.UpsertDimensionReq
	7,  // 24: svr.chart.v1.ChartSvr.dropChartWithSheet:input_type -> svr.chart.v1.DropChatReq
	8,  // 25: svr.chart.v1.ChartSvr.queryStyleInfo:input_type -> svr.chart.v1.StyleReq
	4,  // 26: svr.chart.v1.ChartSvr.queryChartSheetList:input_type -> svr.chart.v1.QueryChartReq
	15, // 27: svr.chart.v1.ChartSvr.createChart:output_type -> svr.ctx.v1.BaseResponse
	15, // 28: svr.chart.v1.ChartSvr.createStatus:output_type -> svr.ctx.v1.BaseResponse
	15, // 29: svr.chart.v1.ChartSvr.createStyle:output_type -> svr.ctx.v1.BaseResponse
	15, // 30: svr.chart.v1.ChartSvr.createEntity:output_type -> svr.ctx.v1.BaseResponse
	15, // 31: svr.chart.v1.ChartSvr.createDimension:output_type -> svr.ctx.v1.BaseResponse
	15, // 32: svr.chart.v1.ChartSvr.queryChart:output_type -> svr.ctx.v1.BaseResponse
	15, // 33: svr.chart.v1.ChartSvr.queryChartList:output_type -> svr.ctx.v1.BaseResponse
	15, // 34: svr.chart.v1.ChartSvr.updateChartBaseInfo:output_type -> svr.ctx.v1.BaseResponse
	15, // 35: svr.chart.v1.ChartSvr.updateChartStatus:output_type -> svr.ctx.v1.BaseResponse
	15, // 36: svr.chart.v1.ChartSvr.updateChartStyle:output_type -> svr.ctx.v1.BaseResponse
	15, // 37: svr.chart.v1.ChartSvr.updateChartEntity:output_type -> svr.ctx.v1.BaseResponse
	15, // 38: svr.chart.v1.ChartSvr.updateChartDimension:output_type -> svr.ctx.v1.BaseResponse
	15, // 39: svr.chart.v1.ChartSvr.dropChartWithSheet:output_type -> svr.ctx.v1.BaseResponse
	15, // 40: svr.chart.v1.ChartSvr.queryStyleInfo:output_type -> svr.ctx.v1.BaseResponse
	15, // 41: svr.chart.v1.ChartSvr.queryChartSheetList:output_type -> svr.ctx.v1.BaseResponse
	27, // [27:42] is the sub-list for method output_type
	12, // [12:27] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_svr_chart_v1_chart_proto_init() }
func file_svr_chart_v1_chart_proto_init() {
	if File_svr_chart_v1_chart_proto != nil {
		return
	}
	file_svr_chart_v1_chart_db_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svr_chart_v1_chart_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStyleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertStatusReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertEntityReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChartReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChartListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertDimensionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropChatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_chart_v1_chart_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StyleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svr_chart_v1_chart_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svr_chart_v1_chart_proto_goTypes,
		DependencyIndexes: file_svr_chart_v1_chart_proto_depIdxs,
		MessageInfos:      file_svr_chart_v1_chart_proto_msgTypes,
	}.Build()
	File_svr_chart_v1_chart_proto = out.File
	file_svr_chart_v1_chart_proto_rawDesc = nil
	file_svr_chart_v1_chart_proto_goTypes = nil
	file_svr_chart_v1_chart_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChartSvrClient is the client API for ChartSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChartSvrClient interface {
	// createChart 创建图表
	CreateChart(ctx context.Context, in *UpsertChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createStatus 创建状态
	CreateStatus(ctx context.Context, in *UpsertStatusReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createStyle 创建表的样式
	CreateStyle(ctx context.Context, in *UpsertStyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createEntity 创建表的单元
	CreateEntity(ctx context.Context, in *UpsertEntityReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createDimension 创建表配置
	CreateDimension(ctx context.Context, in *UpsertDimensionReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryChart 查询图表详细信息
	QueryChart(ctx context.Context, in *QueryChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryChartList 查询图表列表
	QueryChartList(ctx context.Context, in *QueryChartListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateChartBaseInfo 更新问卷信息
	UpdateChartBaseInfo(ctx context.Context, in *UpsertChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateChartStatus 更新图表状态
	UpdateChartStatus(ctx context.Context, in *UpsertStatusReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateChartStyle 更新图表style
	UpdateChartStyle(ctx context.Context, in *UpsertStyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateChartEntity 更新图表适用单位
	UpdateChartEntity(ctx context.Context, in *UpsertEntityReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateChartDimension 更新问图表配置
	UpdateChartDimension(ctx context.Context, in *UpsertDimensionReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// dropChartWithSheet 删除图表sheetid
	DropChartWithSheet(ctx context.Context, in *DropChatReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryStyleInfo 查询style样式
	QueryStyleInfo(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryChartSheetList 查询图表sheet集合
	QueryChartSheetList(ctx context.Context, in *QueryChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type chartSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewChartSvrClient(cc grpc.ClientConnInterface) ChartSvrClient {
	return &chartSvrClient{cc}
}

func (c *chartSvrClient) CreateChart(ctx context.Context, in *UpsertChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/createChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) CreateStatus(ctx context.Context, in *UpsertStatusReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/createStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) CreateStyle(ctx context.Context, in *UpsertStyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/createStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) CreateEntity(ctx context.Context, in *UpsertEntityReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/createEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) CreateDimension(ctx context.Context, in *UpsertDimensionReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/createDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) QueryChart(ctx context.Context, in *QueryChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/queryChart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) QueryChartList(ctx context.Context, in *QueryChartListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/queryChartList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) UpdateChartBaseInfo(ctx context.Context, in *UpsertChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/updateChartBaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) UpdateChartStatus(ctx context.Context, in *UpsertStatusReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/updateChartStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) UpdateChartStyle(ctx context.Context, in *UpsertStyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/updateChartStyle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) UpdateChartEntity(ctx context.Context, in *UpsertEntityReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/updateChartEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) UpdateChartDimension(ctx context.Context, in *UpsertDimensionReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/updateChartDimension", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) DropChartWithSheet(ctx context.Context, in *DropChatReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/dropChartWithSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) QueryStyleInfo(ctx context.Context, in *StyleReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/queryStyleInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chartSvrClient) QueryChartSheetList(ctx context.Context, in *QueryChartReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.chart.v1.ChartSvr/queryChartSheetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChartSvrServer is the server API for ChartSvr service.
type ChartSvrServer interface {
	// createChart 创建图表
	CreateChart(context.Context, *UpsertChartReq) (*v1.BaseResponse, error)
	// createStatus 创建状态
	CreateStatus(context.Context, *UpsertStatusReq) (*v1.BaseResponse, error)
	// createStyle 创建表的样式
	CreateStyle(context.Context, *UpsertStyleReq) (*v1.BaseResponse, error)
	// createEntity 创建表的单元
	CreateEntity(context.Context, *UpsertEntityReq) (*v1.BaseResponse, error)
	// createDimension 创建表配置
	CreateDimension(context.Context, *UpsertDimensionReq) (*v1.BaseResponse, error)
	// queryChart 查询图表详细信息
	QueryChart(context.Context, *QueryChartReq) (*v1.BaseResponse, error)
	// queryChartList 查询图表列表
	QueryChartList(context.Context, *QueryChartListReq) (*v1.BaseResponse, error)
	// updateChartBaseInfo 更新问卷信息
	UpdateChartBaseInfo(context.Context, *UpsertChartReq) (*v1.BaseResponse, error)
	// updateChartStatus 更新图表状态
	UpdateChartStatus(context.Context, *UpsertStatusReq) (*v1.BaseResponse, error)
	// updateChartStyle 更新图表style
	UpdateChartStyle(context.Context, *UpsertStyleReq) (*v1.BaseResponse, error)
	// updateChartEntity 更新图表适用单位
	UpdateChartEntity(context.Context, *UpsertEntityReq) (*v1.BaseResponse, error)
	// updateChartDimension 更新问图表配置
	UpdateChartDimension(context.Context, *UpsertDimensionReq) (*v1.BaseResponse, error)
	// dropChartWithSheet 删除图表sheetid
	DropChartWithSheet(context.Context, *DropChatReq) (*v1.BaseResponse, error)
	// queryStyleInfo 查询style样式
	QueryStyleInfo(context.Context, *StyleReq) (*v1.BaseResponse, error)
	// queryChartSheetList 查询图表sheet集合
	QueryChartSheetList(context.Context, *QueryChartReq) (*v1.BaseResponse, error)
}

// UnimplementedChartSvrServer can be embedded to have forward compatible implementations.
type UnimplementedChartSvrServer struct {
}

func (*UnimplementedChartSvrServer) CreateChart(context.Context, *UpsertChartReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChart not implemented")
}
func (*UnimplementedChartSvrServer) CreateStatus(context.Context, *UpsertStatusReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStatus not implemented")
}
func (*UnimplementedChartSvrServer) CreateStyle(context.Context, *UpsertStyleReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStyle not implemented")
}
func (*UnimplementedChartSvrServer) CreateEntity(context.Context, *UpsertEntityReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (*UnimplementedChartSvrServer) CreateDimension(context.Context, *UpsertDimensionReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDimension not implemented")
}
func (*UnimplementedChartSvrServer) QueryChart(context.Context, *QueryChartReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChart not implemented")
}
func (*UnimplementedChartSvrServer) QueryChartList(context.Context, *QueryChartListReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChartList not implemented")
}
func (*UnimplementedChartSvrServer) UpdateChartBaseInfo(context.Context, *UpsertChartReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChartBaseInfo not implemented")
}
func (*UnimplementedChartSvrServer) UpdateChartStatus(context.Context, *UpsertStatusReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChartStatus not implemented")
}
func (*UnimplementedChartSvrServer) UpdateChartStyle(context.Context, *UpsertStyleReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChartStyle not implemented")
}
func (*UnimplementedChartSvrServer) UpdateChartEntity(context.Context, *UpsertEntityReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChartEntity not implemented")
}
func (*UnimplementedChartSvrServer) UpdateChartDimension(context.Context, *UpsertDimensionReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChartDimension not implemented")
}
func (*UnimplementedChartSvrServer) DropChartWithSheet(context.Context, *DropChatReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropChartWithSheet not implemented")
}
func (*UnimplementedChartSvrServer) QueryStyleInfo(context.Context, *StyleReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryStyleInfo not implemented")
}
func (*UnimplementedChartSvrServer) QueryChartSheetList(context.Context, *QueryChartReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryChartSheetList not implemented")
}

func RegisterChartSvrServer(s *grpc.Server, srv ChartSvrServer) {
	s.RegisterService(&_ChartSvr_serviceDesc, srv)
}

func _ChartSvr_CreateChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).CreateChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/CreateChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).CreateChart(ctx, req.(*UpsertChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_CreateStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).CreateStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/CreateStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).CreateStatus(ctx, req.(*UpsertStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_CreateStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).CreateStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/CreateStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).CreateStyle(ctx, req.(*UpsertStyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).CreateEntity(ctx, req.(*UpsertEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_CreateDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDimensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).CreateDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/CreateDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).CreateDimension(ctx, req.(*UpsertDimensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_QueryChart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).QueryChart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/QueryChart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).QueryChart(ctx, req.(*QueryChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_QueryChartList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChartListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).QueryChartList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/QueryChartList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).QueryChartList(ctx, req.(*QueryChartListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_UpdateChartBaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).UpdateChartBaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/UpdateChartBaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).UpdateChartBaseInfo(ctx, req.(*UpsertChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_UpdateChartStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).UpdateChartStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/UpdateChartStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).UpdateChartStatus(ctx, req.(*UpsertStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_UpdateChartStyle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).UpdateChartStyle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/UpdateChartStyle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).UpdateChartStyle(ctx, req.(*UpsertStyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_UpdateChartEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertEntityReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).UpdateChartEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/UpdateChartEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).UpdateChartEntity(ctx, req.(*UpsertEntityReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_UpdateChartDimension_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertDimensionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).UpdateChartDimension(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/UpdateChartDimension",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).UpdateChartDimension(ctx, req.(*UpsertDimensionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_DropChartWithSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).DropChartWithSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/DropChartWithSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).DropChartWithSheet(ctx, req.(*DropChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_QueryStyleInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StyleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).QueryStyleInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/QueryStyleInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).QueryStyleInfo(ctx, req.(*StyleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChartSvr_QueryChartSheetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryChartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChartSvrServer).QueryChartSheetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.chart.v1.ChartSvr/QueryChartSheetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChartSvrServer).QueryChartSheetList(ctx, req.(*QueryChartReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChartSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svr.chart.v1.ChartSvr",
	HandlerType: (*ChartSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createChart",
			Handler:    _ChartSvr_CreateChart_Handler,
		},
		{
			MethodName: "createStatus",
			Handler:    _ChartSvr_CreateStatus_Handler,
		},
		{
			MethodName: "createStyle",
			Handler:    _ChartSvr_CreateStyle_Handler,
		},
		{
			MethodName: "createEntity",
			Handler:    _ChartSvr_CreateEntity_Handler,
		},
		{
			MethodName: "createDimension",
			Handler:    _ChartSvr_CreateDimension_Handler,
		},
		{
			MethodName: "queryChart",
			Handler:    _ChartSvr_QueryChart_Handler,
		},
		{
			MethodName: "queryChartList",
			Handler:    _ChartSvr_QueryChartList_Handler,
		},
		{
			MethodName: "updateChartBaseInfo",
			Handler:    _ChartSvr_UpdateChartBaseInfo_Handler,
		},
		{
			MethodName: "updateChartStatus",
			Handler:    _ChartSvr_UpdateChartStatus_Handler,
		},
		{
			MethodName: "updateChartStyle",
			Handler:    _ChartSvr_UpdateChartStyle_Handler,
		},
		{
			MethodName: "updateChartEntity",
			Handler:    _ChartSvr_UpdateChartEntity_Handler,
		},
		{
			MethodName: "updateChartDimension",
			Handler:    _ChartSvr_UpdateChartDimension_Handler,
		},
		{
			MethodName: "dropChartWithSheet",
			Handler:    _ChartSvr_DropChartWithSheet_Handler,
		},
		{
			MethodName: "queryStyleInfo",
			Handler:    _ChartSvr_QueryStyleInfo_Handler,
		},
		{
			MethodName: "queryChartSheetList",
			Handler:    _ChartSvr_QueryChartSheetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svr/chart/v1/chart.proto",
}
