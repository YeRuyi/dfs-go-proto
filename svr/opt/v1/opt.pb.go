// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: svr/opt/v1/opt.proto

package optv1

import (
	context "context"
	v1 "github.com/YeRuyi/dfs-go-proto/svr/ctx/v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// NodeHirReq 逻辑左侧架构结构请求
type NodeHirReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fiscper  string `protobuf:"bytes,1,opt,name=fiscper,proto3" json:"fiscper,omitempty"`
	MethodId string `protobuf:"bytes,2,opt,name=methodId,proto3" json:"methodId,omitempty"`
}

func (x *NodeHirReq) Reset() {
	*x = NodeHirReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_opt_v1_opt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeHirReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeHirReq) ProtoMessage() {}

func (x *NodeHirReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_opt_v1_opt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeHirReq.ProtoReflect.Descriptor instead.
func (*NodeHirReq) Descriptor() ([]byte, []int) {
	return file_svr_opt_v1_opt_proto_rawDescGZIP(), []int{0}
}

func (x *NodeHirReq) GetFiscper() string {
	if x != nil {
		return x.Fiscper
	}
	return ""
}

func (x *NodeHirReq) GetMethodId() string {
	if x != nil {
		return x.MethodId
	}
	return ""
}

var File_svr_opt_v1_opt_proto protoreflect.FileDescriptor

var file_svr_opt_v1_opt_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x76, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x76, 0x72, 0x2e, 0x6f, 0x70, 0x74, 0x2e,
	0x76, 0x31, 0x1a, 0x14, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x74, 0x78, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x48, 0x69, 0x72, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x73, 0x63, 0x70, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x69, 0x73, 0x63, 0x70, 0x65, 0x72,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x49, 0x64, 0x32, 0x93, 0x01, 0x0a,
	0x06, 0x4f, 0x70, 0x74, 0x53, 0x76, 0x72, 0x12, 0x47, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x17, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x40, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x69, 0x72,
	0x12, 0x16, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x6f, 0x70, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x48, 0x69, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x50, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6e, 0x74, 0x65, 0x63, 0x68,
	0x2e, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x32, 0x42, 0x05, 0x4f, 0x70,
	0x74, 0x65, 0x72, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x65, 0x52, 0x75, 0x79, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x76, 0x72, 0x2f, 0x6f, 0x70, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x6f,
	0x70, 0x74, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svr_opt_v1_opt_proto_rawDescOnce sync.Once
	file_svr_opt_v1_opt_proto_rawDescData = file_svr_opt_v1_opt_proto_rawDesc
)

func file_svr_opt_v1_opt_proto_rawDescGZIP() []byte {
	file_svr_opt_v1_opt_proto_rawDescOnce.Do(func() {
		file_svr_opt_v1_opt_proto_rawDescData = protoimpl.X.CompressGZIP(file_svr_opt_v1_opt_proto_rawDescData)
	})
	return file_svr_opt_v1_opt_proto_rawDescData
}

var file_svr_opt_v1_opt_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_svr_opt_v1_opt_proto_goTypes = []interface{}{
	(*NodeHirReq)(nil),      // 0: svr.opt.v1.NodeHirReq
	(*v1.CtxUserInfo)(nil),  // 1: svr.ctx.v1.CtxUserInfo
	(*v1.BaseResponse)(nil), // 2: svr.ctx.v1.BaseResponse
}
var file_svr_opt_v1_opt_proto_depIdxs = []int32{
	1, // 0: svr.opt.v1.OptSvr.queryOwnershipList:input_type -> svr.ctx.v1.CtxUserInfo
	0, // 1: svr.opt.v1.OptSvr.queryNodeHir:input_type -> svr.opt.v1.NodeHirReq
	2, // 2: svr.opt.v1.OptSvr.queryOwnershipList:output_type -> svr.ctx.v1.BaseResponse
	2, // 3: svr.opt.v1.OptSvr.queryNodeHir:output_type -> svr.ctx.v1.BaseResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_svr_opt_v1_opt_proto_init() }
func file_svr_opt_v1_opt_proto_init() {
	if File_svr_opt_v1_opt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svr_opt_v1_opt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeHirReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svr_opt_v1_opt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svr_opt_v1_opt_proto_goTypes,
		DependencyIndexes: file_svr_opt_v1_opt_proto_depIdxs,
		MessageInfos:      file_svr_opt_v1_opt_proto_msgTypes,
	}.Build()
	File_svr_opt_v1_opt_proto = out.File
	file_svr_opt_v1_opt_proto_rawDesc = nil
	file_svr_opt_v1_opt_proto_goTypes = nil
	file_svr_opt_v1_opt_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OptSvrClient is the client API for OptSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OptSvrClient interface {
	// queryOwnership 查询ownership
	QueryOwnershipList(ctx context.Context, in *v1.CtxUserInfo, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryNodeHir 查询node节点信息
	QueryNodeHir(ctx context.Context, in *NodeHirReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type optSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewOptSvrClient(cc grpc.ClientConnInterface) OptSvrClient {
	return &optSvrClient{cc}
}

func (c *optSvrClient) QueryOwnershipList(ctx context.Context, in *v1.CtxUserInfo, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.opt.v1.OptSvr/queryOwnershipList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *optSvrClient) QueryNodeHir(ctx context.Context, in *NodeHirReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.opt.v1.OptSvr/queryNodeHir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptSvrServer is the server API for OptSvr service.
type OptSvrServer interface {
	// queryOwnership 查询ownership
	QueryOwnershipList(context.Context, *v1.CtxUserInfo) (*v1.BaseResponse, error)
	// queryNodeHir 查询node节点信息
	QueryNodeHir(context.Context, *NodeHirReq) (*v1.BaseResponse, error)
}

// UnimplementedOptSvrServer can be embedded to have forward compatible implementations.
type UnimplementedOptSvrServer struct {
}

func (*UnimplementedOptSvrServer) QueryOwnershipList(context.Context, *v1.CtxUserInfo) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOwnershipList not implemented")
}
func (*UnimplementedOptSvrServer) QueryNodeHir(context.Context, *NodeHirReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodeHir not implemented")
}

func RegisterOptSvrServer(s *grpc.Server, srv OptSvrServer) {
	s.RegisterService(&_OptSvr_serviceDesc, srv)
}

func _OptSvr_QueryOwnershipList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CtxUserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptSvrServer).QueryOwnershipList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.opt.v1.OptSvr/QueryOwnershipList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptSvrServer).QueryOwnershipList(ctx, req.(*v1.CtxUserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OptSvr_QueryNodeHir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeHirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptSvrServer).QueryNodeHir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.opt.v1.OptSvr/QueryNodeHir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptSvrServer).QueryNodeHir(ctx, req.(*NodeHirReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OptSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svr.opt.v1.OptSvr",
	HandlerType: (*OptSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "queryOwnershipList",
			Handler:    _OptSvr_QueryOwnershipList_Handler,
		},
		{
			MethodName: "queryNodeHir",
			Handler:    _OptSvr_QueryNodeHir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svr/opt/v1/opt.proto",
}
