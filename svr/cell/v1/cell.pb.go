// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: svr/cell/v1/cell.proto

package cellv1

import (
	context "context"
	v1 "github.com/YeRuyi/dfs-go-proto/svr/ctx/v1"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// UpsertCellReq 新增或更新单元格
type UpsertCellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell     []*CellEntity   `protobuf:"bytes,1,rep,name=cell,proto3" json:"cell,omitempty"`
	UserInfo *v1.CtxUserInfo `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string          `protobuf:"bytes,3,opt,name=repid,proto3" json:"repid,omitempty"`
}

func (x *UpsertCellReq) Reset() {
	*x = UpsertCellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertCellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertCellReq) ProtoMessage() {}

func (x *UpsertCellReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertCellReq.ProtoReflect.Descriptor instead.
func (*UpsertCellReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{0}
}

func (x *UpsertCellReq) GetCell() []*CellEntity {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *UpsertCellReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UpsertCellReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

// UpsertSubCellReq 对新增、修改、删除子单元格
type UpsertSubCellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cell     []*CellSubEntity `protobuf:"bytes,1,rep,name=cell,proto3" json:"cell,omitempty"`
	UserInfo *v1.CtxUserInfo  `protobuf:"bytes,2,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string           `protobuf:"bytes,3,opt,name=repid,proto3" json:"repid,omitempty"`
}

func (x *UpsertSubCellReq) Reset() {
	*x = UpsertSubCellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSubCellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSubCellReq) ProtoMessage() {}

func (x *UpsertSubCellReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSubCellReq.ProtoReflect.Descriptor instead.
func (*UpsertSubCellReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{1}
}

func (x *UpsertSubCellReq) GetCell() []*CellSubEntity {
	if x != nil {
		return x.Cell
	}
	return nil
}

func (x *UpsertSubCellReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *UpsertSubCellReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

// QueryCellReq 查询单元格对象
type QueryCellReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
}

func (x *QueryCellReq) Reset() {
	*x = QueryCellReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCellReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCellReq) ProtoMessage() {}

func (x *QueryCellReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCellReq.ProtoReflect.Descriptor instead.
func (*QueryCellReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{2}
}

func (x *QueryCellReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *QueryCellReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

// CellListReq 查询单元格
type CellListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Sheetid  string          `protobuf:"bytes,3,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
}

func (x *CellListReq) Reset() {
	*x = CellListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellListReq) ProtoMessage() {}

func (x *CellListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellListReq.ProtoReflect.Descriptor instead.
func (*CellListReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{3}
}

func (x *CellListReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CellListReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *CellListReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

// SubCellListReq 子单元格查询
type SubCellListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid   []string        `protobuf:"bytes,3,rep,name=compid,proto3" json:"compid,omitempty"`
}

func (x *SubCellListReq) Reset() {
	*x = SubCellListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCellListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCellListReq) ProtoMessage() {}

func (x *SubCellListReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCellListReq.ProtoReflect.Descriptor instead.
func (*SubCellListReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{4}
}

func (x *SubCellListReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *SubCellListReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *SubCellListReq) GetCompid() []string {
	if x != nil {
		return x.Compid
	}
	return nil
}

// SubCellDropReq 删除子块单元格
type SubCellDropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid  string   `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid []string `protobuf:"bytes,2,rep,name=compid,proto3" json:"compid,omitempty"`
}

func (x *SubCellDropReq) Reset() {
	*x = SubCellDropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubCellDropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubCellDropReq) ProtoMessage() {}

func (x *SubCellDropReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubCellDropReq.ProtoReflect.Descriptor instead.
func (*SubCellDropReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{5}
}

func (x *SubCellDropReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *SubCellDropReq) GetCompid() []string {
	if x != nil {
		return x.Compid
	}
	return nil
}

// CellSpecItemReq 特定cell查询
type CellSpecItemReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserInfo *v1.CtxUserInfo `protobuf:"bytes,1,opt,name=userInfo,proto3" json:"userInfo,omitempty"`
	Repid    string          `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid   string          `protobuf:"bytes,3,opt,name=compid,proto3" json:"compid,omitempty"`
}

func (x *CellSpecItemReq) Reset() {
	*x = CellSpecItemReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellSpecItemReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellSpecItemReq) ProtoMessage() {}

func (x *CellSpecItemReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellSpecItemReq.ProtoReflect.Descriptor instead.
func (*CellSpecItemReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{6}
}

func (x *CellSpecItemReq) GetUserInfo() *v1.CtxUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *CellSpecItemReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *CellSpecItemReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

// DropReq  表配置
type DropReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid   string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Sheetid string `protobuf:"bytes,2,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
}

func (x *DropReq) Reset() {
	*x = DropReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropReq) ProtoMessage() {}

func (x *DropReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropReq.ProtoReflect.Descriptor instead.
func (*DropReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{7}
}

func (x *DropReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *DropReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

// UpdateJQIDReq 更新jqid
type UpdateJQIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells    []*UpdateCellJQIDReq    `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	SubCells []*UpdateSubCellJQIDReq `protobuf:"bytes,2,rep,name=subCells,proto3" json:"subCells,omitempty"`
}

func (x *UpdateJQIDReq) Reset() {
	*x = UpdateJQIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJQIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJQIDReq) ProtoMessage() {}

func (x *UpdateJQIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJQIDReq.ProtoReflect.Descriptor instead.
func (*UpdateJQIDReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateJQIDReq) GetCells() []*UpdateCellJQIDReq {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *UpdateJQIDReq) GetSubCells() []*UpdateSubCellJQIDReq {
	if x != nil {
		return x.SubCells
	}
	return nil
}

// UpdateCellJQIDReq 更新jqID
type UpdateCellJQIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid    string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid   string `protobuf:"bytes,2,opt,name=compid,proto3" json:"compid,omitempty"`
	Compjqid string `protobuf:"bytes,3,opt,name=compjqid,proto3" json:"compjqid,omitempty"`
}

func (x *UpdateCellJQIDReq) Reset() {
	*x = UpdateCellJQIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCellJQIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCellJQIDReq) ProtoMessage() {}

func (x *UpdateCellJQIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCellJQIDReq.ProtoReflect.Descriptor instead.
func (*UpdateCellJQIDReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCellJQIDReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpdateCellJQIDReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

func (x *UpdateCellJQIDReq) GetCompjqid() string {
	if x != nil {
		return x.Compjqid
	}
	return ""
}

// UpdateSubCellJQIDReq 更新子单元格jqID
type UpdateSubCellJQIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid     string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid    string `protobuf:"bytes,2,opt,name=compid,proto3" json:"compid,omitempty"`
	Compjqid  string `protobuf:"bytes,3,opt,name=compjqid,proto3" json:"compjqid,omitempty"`
	Subcompid string `protobuf:"bytes,4,opt,name=subcompid,proto3" json:"subcompid,omitempty"`
}

func (x *UpdateSubCellJQIDReq) Reset() {
	*x = UpdateSubCellJQIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubCellJQIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubCellJQIDReq) ProtoMessage() {}

func (x *UpdateSubCellJQIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubCellJQIDReq.ProtoReflect.Descriptor instead.
func (*UpdateSubCellJQIDReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateSubCellJQIDReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *UpdateSubCellJQIDReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

func (x *UpdateSubCellJQIDReq) GetCompjqid() string {
	if x != nil {
		return x.Compjqid
	}
	return ""
}

func (x *UpdateSubCellJQIDReq) GetSubcompid() string {
	if x != nil {
		return x.Subcompid
	}
	return ""
}

// GetInnerCellsReq 获取子单元格
type GetInnerCellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid  string `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid string `protobuf:"bytes,2,opt,name=compid,proto3" json:"compid,omitempty"`
}

func (x *GetInnerCellsReq) Reset() {
	*x = GetInnerCellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInnerCellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInnerCellsReq) ProtoMessage() {}

func (x *GetInnerCellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInnerCellsReq.ProtoReflect.Descriptor instead.
func (*GetInnerCellsReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{11}
}

func (x *GetInnerCellsReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *GetInnerCellsReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

// SetInnerCellsReq 插入子单元格
type SetInnerCellsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cells  []*CellInnerEntity `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
	Repid  string             `protobuf:"bytes,2,opt,name=repid,proto3" json:"repid,omitempty"`
	Compid string             `protobuf:"bytes,3,opt,name=compid,proto3" json:"compid,omitempty"`
}

func (x *SetInnerCellsReq) Reset() {
	*x = SetInnerCellsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cell_v1_cell_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetInnerCellsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetInnerCellsReq) ProtoMessage() {}

func (x *SetInnerCellsReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cell_v1_cell_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetInnerCellsReq.ProtoReflect.Descriptor instead.
func (*SetInnerCellsReq) Descriptor() ([]byte, []int) {
	return file_svr_cell_v1_cell_proto_rawDescGZIP(), []int{12}
}

func (x *SetInnerCellsReq) GetCells() []*CellInnerEntity {
	if x != nil {
		return x.Cells
	}
	return nil
}

func (x *SetInnerCellsReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *SetInnerCellsReq) GetCompid() string {
	if x != nil {
		return x.Compid
	}
	return ""
}

var File_svr_cell_v1_cell_proto protoreflect.FileDescriptor

var file_svr_cell_v1_cell_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65,
	0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x74, 0x78, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x74, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x76, 0x72,
	0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x43, 0x65,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x75, 0x62, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x04, 0x63, 0x65, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64,
	0x22, 0x59, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x22, 0x72, 0x0a, 0x0b, 0x43,
	0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x22,
	0x73, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x64, 0x22, 0x74, 0x0a, 0x0f, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x33, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x74, 0x78, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x07, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x68, 0x65, 0x65, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68,
	0x65, 0x65, 0x74, 0x69, 0x64, 0x22, 0x84, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x51, 0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4a,
	0x51, 0x49, 0x44, 0x52, 0x65, 0x71, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4a, 0x51, 0x49, 0x44, 0x52,
	0x65, 0x71, 0x52, 0x08, 0x73, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22, 0x5d, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4a, 0x51, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6a, 0x71, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6a, 0x71, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4a, 0x51, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6a, 0x71, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6a, 0x71, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x64, 0x22, 0x74, 0x0a,
	0x10, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x05,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x64, 0x32, 0xaa, 0x09, 0x0a, 0x07, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x76, 0x72, 0x12,
	0x43, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1a,
	0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73,
	0x65, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x64, 0x72, 0x6f,
	0x70, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74,
	0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4b, 0x0a, 0x11, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70,
	0x65, 0x63, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1c, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74,
	0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72,
	0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0c, 0x64, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x62, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x17, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x52, 0x65, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a,
	0x18, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x43, 0x65, 0x6c, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x43, 0x6f,
	0x6d, 0x70, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x1a,
	0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x12, 0x64, 0x72, 0x6f,
	0x70, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x68, 0x65, 0x65, 0x74, 0x12,
	0x14, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x72,
	0x6f, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x4a, 0x51, 0x49,
	0x44, 0x12, 0x1a, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x51, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x73,
	0x76, 0x72, 0x2e, 0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76,
	0x72, 0x2e, 0x63, 0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x65, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63,
	0x74, 0x78, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x12, 0x1d, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x65,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x74, 0x78,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x51, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x6e, 0x74, 0x65, 0x63, 0x68, 0x2e, 0x63,
	0x68, 0x61, 0x72, 0x74, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x65, 0x52,
	0x75, 0x79, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x65, 0x6c,
	0x6c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svr_cell_v1_cell_proto_rawDescOnce sync.Once
	file_svr_cell_v1_cell_proto_rawDescData = file_svr_cell_v1_cell_proto_rawDesc
)

func file_svr_cell_v1_cell_proto_rawDescGZIP() []byte {
	file_svr_cell_v1_cell_proto_rawDescOnce.Do(func() {
		file_svr_cell_v1_cell_proto_rawDescData = protoimpl.X.CompressGZIP(file_svr_cell_v1_cell_proto_rawDescData)
	})
	return file_svr_cell_v1_cell_proto_rawDescData
}

var file_svr_cell_v1_cell_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_svr_cell_v1_cell_proto_goTypes = []interface{}{
	(*UpsertCellReq)(nil),        // 0: svr.cell.v1.UpsertCellReq
	(*UpsertSubCellReq)(nil),     // 1: svr.cell.v1.UpsertSubCellReq
	(*QueryCellReq)(nil),         // 2: svr.cell.v1.QueryCellReq
	(*CellListReq)(nil),          // 3: svr.cell.v1.CellListReq
	(*SubCellListReq)(nil),       // 4: svr.cell.v1.SubCellListReq
	(*SubCellDropReq)(nil),       // 5: svr.cell.v1.SubCellDropReq
	(*CellSpecItemReq)(nil),      // 6: svr.cell.v1.CellSpecItemReq
	(*DropReq)(nil),              // 7: svr.cell.v1.DropReq
	(*UpdateJQIDReq)(nil),        // 8: svr.cell.v1.UpdateJQIDReq
	(*UpdateCellJQIDReq)(nil),    // 9: svr.cell.v1.UpdateCellJQIDReq
	(*UpdateSubCellJQIDReq)(nil), // 10: svr.cell.v1.UpdateSubCellJQIDReq
	(*GetInnerCellsReq)(nil),     // 11: svr.cell.v1.GetInnerCellsReq
	(*SetInnerCellsReq)(nil),     // 12: svr.cell.v1.SetInnerCellsReq
	(*CellEntity)(nil),           // 13: svr.cell.v1.CellEntity
	(*v1.CtxUserInfo)(nil),       // 14: svr.ctx.v1.CtxUserInfo
	(*CellSubEntity)(nil),        // 15: svr.cell.v1.CellSubEntity
	(*CellInnerEntity)(nil),      // 16: svr.cell.v1.CellInnerEntity
	(*v1.BaseResponse)(nil),      // 17: svr.ctx.v1.BaseResponse
}
var file_svr_cell_v1_cell_proto_depIdxs = []int32{
	13, // 0: svr.cell.v1.UpsertCellReq.cell:type_name -> svr.cell.v1.CellEntity
	14, // 1: svr.cell.v1.UpsertCellReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	15, // 2: svr.cell.v1.UpsertSubCellReq.cell:type_name -> svr.cell.v1.CellSubEntity
	14, // 3: svr.cell.v1.UpsertSubCellReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	14, // 4: svr.cell.v1.QueryCellReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	14, // 5: svr.cell.v1.CellListReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	14, // 6: svr.cell.v1.SubCellListReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	14, // 7: svr.cell.v1.CellSpecItemReq.userInfo:type_name -> svr.ctx.v1.CtxUserInfo
	9,  // 8: svr.cell.v1.UpdateJQIDReq.cells:type_name -> svr.cell.v1.UpdateCellJQIDReq
	10, // 9: svr.cell.v1.UpdateJQIDReq.subCells:type_name -> svr.cell.v1.UpdateSubCellJQIDReq
	16, // 10: svr.cell.v1.SetInnerCellsReq.cells:type_name -> svr.cell.v1.CellInnerEntity
	0,  // 11: svr.cell.v1.CellSvr.updateCells:input_type -> svr.cell.v1.UpsertCellReq
	0,  // 12: svr.cell.v1.CellSvr.createCells:input_type -> svr.cell.v1.UpsertCellReq
	0,  // 13: svr.cell.v1.CellSvr.dropCells:input_type -> svr.cell.v1.UpsertCellReq
	3,  // 14: svr.cell.v1.CellSvr.queryCellList:input_type -> svr.cell.v1.CellListReq
	6,  // 15: svr.cell.v1.CellSvr.queryCellSpecItem:input_type -> svr.cell.v1.CellSpecItemReq
	1,  // 16: svr.cell.v1.CellSvr.updateSubCells:input_type -> svr.cell.v1.UpsertSubCellReq
	1,  // 17: svr.cell.v1.CellSvr.createSubCells:input_type -> svr.cell.v1.UpsertSubCellReq
	5,  // 18: svr.cell.v1.CellSvr.dropSubCells:input_type -> svr.cell.v1.SubCellDropReq
	4,  // 19: svr.cell.v1.CellSvr.querySubCellListByRepID:input_type -> svr.cell.v1.SubCellListReq
	4,  // 20: svr.cell.v1.CellSvr.querySubCellListByCompID:input_type -> svr.cell.v1.SubCellListReq
	2,  // 21: svr.cell.v1.CellSvr.updateCellCompID:input_type -> svr.cell.v1.QueryCellReq
	7,  // 22: svr.cell.v1.CellSvr.dropCellsWithSheet:input_type -> svr.cell.v1.DropReq
	8,  // 23: svr.cell.v1.CellSvr.updateCellJQID:input_type -> svr.cell.v1.UpdateJQIDReq
	11, // 24: svr.cell.v1.CellSvr.getInnerCellsList:input_type -> svr.cell.v1.GetInnerCellsReq
	12, // 25: svr.cell.v1.CellSvr.createInnerCells:input_type -> svr.cell.v1.SetInnerCellsReq
	11, // 26: svr.cell.v1.CellSvr.setDropInnerCells:input_type -> svr.cell.v1.GetInnerCellsReq
	17, // 27: svr.cell.v1.CellSvr.updateCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 28: svr.cell.v1.CellSvr.createCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 29: svr.cell.v1.CellSvr.dropCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 30: svr.cell.v1.CellSvr.queryCellList:output_type -> svr.ctx.v1.BaseResponse
	17, // 31: svr.cell.v1.CellSvr.queryCellSpecItem:output_type -> svr.ctx.v1.BaseResponse
	17, // 32: svr.cell.v1.CellSvr.updateSubCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 33: svr.cell.v1.CellSvr.createSubCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 34: svr.cell.v1.CellSvr.dropSubCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 35: svr.cell.v1.CellSvr.querySubCellListByRepID:output_type -> svr.ctx.v1.BaseResponse
	17, // 36: svr.cell.v1.CellSvr.querySubCellListByCompID:output_type -> svr.ctx.v1.BaseResponse
	17, // 37: svr.cell.v1.CellSvr.updateCellCompID:output_type -> svr.ctx.v1.BaseResponse
	17, // 38: svr.cell.v1.CellSvr.dropCellsWithSheet:output_type -> svr.ctx.v1.BaseResponse
	17, // 39: svr.cell.v1.CellSvr.updateCellJQID:output_type -> svr.ctx.v1.BaseResponse
	17, // 40: svr.cell.v1.CellSvr.getInnerCellsList:output_type -> svr.ctx.v1.BaseResponse
	17, // 41: svr.cell.v1.CellSvr.createInnerCells:output_type -> svr.ctx.v1.BaseResponse
	17, // 42: svr.cell.v1.CellSvr.setDropInnerCells:output_type -> svr.ctx.v1.BaseResponse
	27, // [27:43] is the sub-list for method output_type
	11, // [11:27] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_svr_cell_v1_cell_proto_init() }
func file_svr_cell_v1_cell_proto_init() {
	if File_svr_cell_v1_cell_proto != nil {
		return
	}
	file_svr_cell_v1_cell_db_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svr_cell_v1_cell_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertCellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSubCellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCellReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCellListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubCellDropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellSpecItemReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJQIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCellJQIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubCellJQIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInnerCellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cell_v1_cell_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetInnerCellsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svr_cell_v1_cell_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svr_cell_v1_cell_proto_goTypes,
		DependencyIndexes: file_svr_cell_v1_cell_proto_depIdxs,
		MessageInfos:      file_svr_cell_v1_cell_proto_msgTypes,
	}.Build()
	File_svr_cell_v1_cell_proto = out.File
	file_svr_cell_v1_cell_proto_rawDesc = nil
	file_svr_cell_v1_cell_proto_goTypes = nil
	file_svr_cell_v1_cell_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CellSvrClient is the client API for CellSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CellSvrClient interface {
	// upsertCell 更新单元格，除了rowNo和columnNo还有对应主键信息，其余全部更新
	UpdateCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createCells 创建单元格
	CreateCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// dropCells 删除单元格
	DropCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryCellList 查询图表列表
	QueryCellList(ctx context.Context, in *CellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// queryCellSpecItem 查询单个单元格
	QueryCellSpecItem(ctx context.Context, in *CellSpecItemReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateSubCells 更新子单元格
	UpdateSubCells(ctx context.Context, in *UpsertSubCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createSubCells 创建子单元格
	CreateSubCells(ctx context.Context, in *UpsertSubCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createSubCells 删除子单元格
	DropSubCells(ctx context.Context, in *SubCellDropReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// querySubCellListByRepID 查询子单元格列表
	QuerySubCellListByRepID(ctx context.Context, in *SubCellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// querySubCellListByCompID 查询子单元格列表
	QuerySubCellListByCompID(ctx context.Context, in *SubCellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateCellCompID 更新单元格的compid
	UpdateCellCompID(ctx context.Context, in *QueryCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// dropChartWithSheet 删除sheetid的图表
	DropCellsWithSheet(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// updateCellJQID 更新JQID
	UpdateCellJQID(ctx context.Context, in *UpdateJQIDReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// getInnerCellsList 获取内单元格
	GetInnerCellsList(ctx context.Context, in *GetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// createInnerCells 创建内单元格
	CreateInnerCells(ctx context.Context, in *SetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
	// setDropInnerCells 删除内单元格
	SetDropInnerCells(ctx context.Context, in *GetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error)
}

type cellSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewCellSvrClient(cc grpc.ClientConnInterface) CellSvrClient {
	return &cellSvrClient{cc}
}

func (c *cellSvrClient) UpdateCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/updateCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) CreateCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/createCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) DropCells(ctx context.Context, in *UpsertCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/dropCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) QueryCellList(ctx context.Context, in *CellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/queryCellList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) QueryCellSpecItem(ctx context.Context, in *CellSpecItemReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/queryCellSpecItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) UpdateSubCells(ctx context.Context, in *UpsertSubCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/updateSubCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) CreateSubCells(ctx context.Context, in *UpsertSubCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/createSubCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) DropSubCells(ctx context.Context, in *SubCellDropReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/dropSubCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) QuerySubCellListByRepID(ctx context.Context, in *SubCellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/querySubCellListByRepID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) QuerySubCellListByCompID(ctx context.Context, in *SubCellListReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/querySubCellListByCompID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) UpdateCellCompID(ctx context.Context, in *QueryCellReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/updateCellCompID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) DropCellsWithSheet(ctx context.Context, in *DropReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/dropCellsWithSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) UpdateCellJQID(ctx context.Context, in *UpdateJQIDReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/updateCellJQID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) GetInnerCellsList(ctx context.Context, in *GetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/getInnerCellsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) CreateInnerCells(ctx context.Context, in *SetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/createInnerCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cellSvrClient) SetDropInnerCells(ctx context.Context, in *GetInnerCellsReq, opts ...grpc.CallOption) (*v1.BaseResponse, error) {
	out := new(v1.BaseResponse)
	err := c.cc.Invoke(ctx, "/svr.cell.v1.CellSvr/setDropInnerCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CellSvrServer is the server API for CellSvr service.
type CellSvrServer interface {
	// upsertCell 更新单元格，除了rowNo和columnNo还有对应主键信息，其余全部更新
	UpdateCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error)
	// createCells 创建单元格
	CreateCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error)
	// dropCells 删除单元格
	DropCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error)
	// queryCellList 查询图表列表
	QueryCellList(context.Context, *CellListReq) (*v1.BaseResponse, error)
	// queryCellSpecItem 查询单个单元格
	QueryCellSpecItem(context.Context, *CellSpecItemReq) (*v1.BaseResponse, error)
	// updateSubCells 更新子单元格
	UpdateSubCells(context.Context, *UpsertSubCellReq) (*v1.BaseResponse, error)
	// createSubCells 创建子单元格
	CreateSubCells(context.Context, *UpsertSubCellReq) (*v1.BaseResponse, error)
	// createSubCells 删除子单元格
	DropSubCells(context.Context, *SubCellDropReq) (*v1.BaseResponse, error)
	// querySubCellListByRepID 查询子单元格列表
	QuerySubCellListByRepID(context.Context, *SubCellListReq) (*v1.BaseResponse, error)
	// querySubCellListByCompID 查询子单元格列表
	QuerySubCellListByCompID(context.Context, *SubCellListReq) (*v1.BaseResponse, error)
	// updateCellCompID 更新单元格的compid
	UpdateCellCompID(context.Context, *QueryCellReq) (*v1.BaseResponse, error)
	// dropChartWithSheet 删除sheetid的图表
	DropCellsWithSheet(context.Context, *DropReq) (*v1.BaseResponse, error)
	// updateCellJQID 更新JQID
	UpdateCellJQID(context.Context, *UpdateJQIDReq) (*v1.BaseResponse, error)
	// getInnerCellsList 获取内单元格
	GetInnerCellsList(context.Context, *GetInnerCellsReq) (*v1.BaseResponse, error)
	// createInnerCells 创建内单元格
	CreateInnerCells(context.Context, *SetInnerCellsReq) (*v1.BaseResponse, error)
	// setDropInnerCells 删除内单元格
	SetDropInnerCells(context.Context, *GetInnerCellsReq) (*v1.BaseResponse, error)
}

// UnimplementedCellSvrServer can be embedded to have forward compatible implementations.
type UnimplementedCellSvrServer struct {
}

func (*UnimplementedCellSvrServer) UpdateCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCells not implemented")
}
func (*UnimplementedCellSvrServer) CreateCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCells not implemented")
}
func (*UnimplementedCellSvrServer) DropCells(context.Context, *UpsertCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCells not implemented")
}
func (*UnimplementedCellSvrServer) QueryCellList(context.Context, *CellListReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCellList not implemented")
}
func (*UnimplementedCellSvrServer) QueryCellSpecItem(context.Context, *CellSpecItemReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCellSpecItem not implemented")
}
func (*UnimplementedCellSvrServer) UpdateSubCells(context.Context, *UpsertSubCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubCells not implemented")
}
func (*UnimplementedCellSvrServer) CreateSubCells(context.Context, *UpsertSubCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubCells not implemented")
}
func (*UnimplementedCellSvrServer) DropSubCells(context.Context, *SubCellDropReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropSubCells not implemented")
}
func (*UnimplementedCellSvrServer) QuerySubCellListByRepID(context.Context, *SubCellListReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubCellListByRepID not implemented")
}
func (*UnimplementedCellSvrServer) QuerySubCellListByCompID(context.Context, *SubCellListReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySubCellListByCompID not implemented")
}
func (*UnimplementedCellSvrServer) UpdateCellCompID(context.Context, *QueryCellReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCellCompID not implemented")
}
func (*UnimplementedCellSvrServer) DropCellsWithSheet(context.Context, *DropReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCellsWithSheet not implemented")
}
func (*UnimplementedCellSvrServer) UpdateCellJQID(context.Context, *UpdateJQIDReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCellJQID not implemented")
}
func (*UnimplementedCellSvrServer) GetInnerCellsList(context.Context, *GetInnerCellsReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInnerCellsList not implemented")
}
func (*UnimplementedCellSvrServer) CreateInnerCells(context.Context, *SetInnerCellsReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInnerCells not implemented")
}
func (*UnimplementedCellSvrServer) SetDropInnerCells(context.Context, *GetInnerCellsReq) (*v1.BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDropInnerCells not implemented")
}

func RegisterCellSvrServer(s *grpc.Server, srv CellSvrServer) {
	s.RegisterService(&_CellSvr_serviceDesc, srv)
}

func _CellSvr_UpdateCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).UpdateCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/UpdateCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).UpdateCells(ctx, req.(*UpsertCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_CreateCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).CreateCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/CreateCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).CreateCells(ctx, req.(*UpsertCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_DropCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).DropCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/DropCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).DropCells(ctx, req.(*UpsertCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_QueryCellList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).QueryCellList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/QueryCellList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).QueryCellList(ctx, req.(*CellListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_QueryCellSpecItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellSpecItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).QueryCellSpecItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/QueryCellSpecItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).QueryCellSpecItem(ctx, req.(*CellSpecItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_UpdateSubCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSubCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).UpdateSubCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/UpdateSubCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).UpdateSubCells(ctx, req.(*UpsertSubCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_CreateSubCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSubCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).CreateSubCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/CreateSubCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).CreateSubCells(ctx, req.(*UpsertSubCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_DropSubCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCellDropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).DropSubCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/DropSubCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).DropSubCells(ctx, req.(*SubCellDropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_QuerySubCellListByRepID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCellListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).QuerySubCellListByRepID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/QuerySubCellListByRepID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).QuerySubCellListByRepID(ctx, req.(*SubCellListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_QuerySubCellListByCompID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubCellListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).QuerySubCellListByCompID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/QuerySubCellListByCompID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).QuerySubCellListByCompID(ctx, req.(*SubCellListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_UpdateCellCompID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).UpdateCellCompID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/UpdateCellCompID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).UpdateCellCompID(ctx, req.(*QueryCellReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_DropCellsWithSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).DropCellsWithSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/DropCellsWithSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).DropCellsWithSheet(ctx, req.(*DropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_UpdateCellJQID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJQIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).UpdateCellJQID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/UpdateCellJQID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).UpdateCellJQID(ctx, req.(*UpdateJQIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_GetInnerCellsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInnerCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).GetInnerCellsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/GetInnerCellsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).GetInnerCellsList(ctx, req.(*GetInnerCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_CreateInnerCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInnerCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).CreateInnerCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/CreateInnerCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).CreateInnerCells(ctx, req.(*SetInnerCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CellSvr_SetDropInnerCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInnerCellsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CellSvrServer).SetDropInnerCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cell.v1.CellSvr/SetDropInnerCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CellSvrServer).SetDropInnerCells(ctx, req.(*GetInnerCellsReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CellSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svr.cell.v1.CellSvr",
	HandlerType: (*CellSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "updateCells",
			Handler:    _CellSvr_UpdateCells_Handler,
		},
		{
			MethodName: "createCells",
			Handler:    _CellSvr_CreateCells_Handler,
		},
		{
			MethodName: "dropCells",
			Handler:    _CellSvr_DropCells_Handler,
		},
		{
			MethodName: "queryCellList",
			Handler:    _CellSvr_QueryCellList_Handler,
		},
		{
			MethodName: "queryCellSpecItem",
			Handler:    _CellSvr_QueryCellSpecItem_Handler,
		},
		{
			MethodName: "updateSubCells",
			Handler:    _CellSvr_UpdateSubCells_Handler,
		},
		{
			MethodName: "createSubCells",
			Handler:    _CellSvr_CreateSubCells_Handler,
		},
		{
			MethodName: "dropSubCells",
			Handler:    _CellSvr_DropSubCells_Handler,
		},
		{
			MethodName: "querySubCellListByRepID",
			Handler:    _CellSvr_QuerySubCellListByRepID_Handler,
		},
		{
			MethodName: "querySubCellListByCompID",
			Handler:    _CellSvr_QuerySubCellListByCompID_Handler,
		},
		{
			MethodName: "updateCellCompID",
			Handler:    _CellSvr_UpdateCellCompID_Handler,
		},
		{
			MethodName: "dropCellsWithSheet",
			Handler:    _CellSvr_DropCellsWithSheet_Handler,
		},
		{
			MethodName: "updateCellJQID",
			Handler:    _CellSvr_UpdateCellJQID_Handler,
		},
		{
			MethodName: "getInnerCellsList",
			Handler:    _CellSvr_GetInnerCellsList_Handler,
		},
		{
			MethodName: "createInnerCells",
			Handler:    _CellSvr_CreateInnerCells_Handler,
		},
		{
			MethodName: "setDropInnerCells",
			Handler:    _CellSvr_SetDropInnerCells_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svr/cell/v1/cell.proto",
}
