// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: svr/cal/v1/cal.pub.proto

package calv1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// GetStableCalReq 固定计算请求值
type GetStableCalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repid            string              `protobuf:"bytes,1,opt,name=repid,proto3" json:"repid,omitempty"`
	Sheetid          string              `protobuf:"bytes,2,opt,name=sheetid,proto3" json:"sheetid,omitempty"`
	ContextCondition map[string]*any.Any `protobuf:"bytes,3,rep,name=contextCondition,proto3" json:"contextCondition,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetStableCalReq) Reset() {
	*x = GetStableCalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableCalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableCalReq) ProtoMessage() {}

func (x *GetStableCalReq) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableCalReq.ProtoReflect.Descriptor instead.
func (*GetStableCalReq) Descriptor() ([]byte, []int) {
	return file_svr_cal_v1_cal_pub_proto_rawDescGZIP(), []int{0}
}

func (x *GetStableCalReq) GetRepid() string {
	if x != nil {
		return x.Repid
	}
	return ""
}

func (x *GetStableCalReq) GetSheetid() string {
	if x != nil {
		return x.Sheetid
	}
	return ""
}

func (x *GetStableCalReq) GetContextCondition() map[string]*any.Any {
	if x != nil {
		return x.ContextCondition
	}
	return nil
}

// GetStableCalRes 固定计算返回值
type GetStableCalRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code  string                           `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg   string                           `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Cells []*GetStableCalRes_CellValueItem `protobuf:"bytes,3,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (x *GetStableCalRes) Reset() {
	*x = GetStableCalRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableCalRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableCalRes) ProtoMessage() {}

func (x *GetStableCalRes) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableCalRes.ProtoReflect.Descriptor instead.
func (*GetStableCalRes) Descriptor() ([]byte, []int) {
	return file_svr_cal_v1_cal_pub_proto_rawDescGZIP(), []int{1}
}

func (x *GetStableCalRes) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetStableCalRes) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetStableCalRes) GetCells() []*GetStableCalRes_CellValueItem {
	if x != nil {
		return x.Cells
	}
	return nil
}

type GetStableCalRes_CellValueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowCell string  `protobuf:"bytes,1,opt,name=rowCell,proto3" json:"rowCell,omitempty"`
	Value   float32 `protobuf:"fixed32,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetStableCalRes_CellValueItem) Reset() {
	*x = GetStableCalRes_CellValueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStableCalRes_CellValueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStableCalRes_CellValueItem) ProtoMessage() {}

func (x *GetStableCalRes_CellValueItem) ProtoReflect() protoreflect.Message {
	mi := &file_svr_cal_v1_cal_pub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStableCalRes_CellValueItem.ProtoReflect.Descriptor instead.
func (*GetStableCalRes_CellValueItem) Descriptor() ([]byte, []int) {
	return file_svr_cal_v1_cal_pub_proto_rawDescGZIP(), []int{1, 0}
}

func (x *GetStableCalRes_CellValueItem) GetRowCell() string {
	if x != nil {
		return x.RowCell
	}
	return ""
}

func (x *GetStableCalRes_CellValueItem) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_svr_cal_v1_cal_pub_proto protoreflect.FileDescriptor

var file_svr_cal_v1_cal_pub_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x76, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x6c,
	0x2e, 0x70, 0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x76, 0x72, 0x2e,
	0x63, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfb, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x69, 0x64, 0x12, 0x5d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x76, 0x72, 0x2e, 0x63, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x59, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb9, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x3f, 0x0a, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x05, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x0d, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6f, 0x77, 0x43,
	0x65, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x32, 0x72, 0x0a, 0x09, 0x43, 0x61, 0x6c,
	0x50, 0x75, 0x62, 0x53, 0x76, 0x72, 0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x12, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x73, 0x76, 0x72, 0x2e, 0x63, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x3a, 0x01, 0x2a, 0x42, 0x31, 0x5a,
	0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x65, 0x52, 0x75,
	0x79, 0x69, 0x2f, 0x64, 0x66, 0x73, 0x2d, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x73, 0x76, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x61, 0x6c, 0x76, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svr_cal_v1_cal_pub_proto_rawDescOnce sync.Once
	file_svr_cal_v1_cal_pub_proto_rawDescData = file_svr_cal_v1_cal_pub_proto_rawDesc
)

func file_svr_cal_v1_cal_pub_proto_rawDescGZIP() []byte {
	file_svr_cal_v1_cal_pub_proto_rawDescOnce.Do(func() {
		file_svr_cal_v1_cal_pub_proto_rawDescData = protoimpl.X.CompressGZIP(file_svr_cal_v1_cal_pub_proto_rawDescData)
	})
	return file_svr_cal_v1_cal_pub_proto_rawDescData
}

var file_svr_cal_v1_cal_pub_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_svr_cal_v1_cal_pub_proto_goTypes = []interface{}{
	(*GetStableCalReq)(nil),               // 0: svr.cal.v1.GetStableCalReq
	(*GetStableCalRes)(nil),               // 1: svr.cal.v1.GetStableCalRes
	nil,                                   // 2: svr.cal.v1.GetStableCalReq.ContextConditionEntry
	(*GetStableCalRes_CellValueItem)(nil), // 3: svr.cal.v1.GetStableCalRes.CellValueItem
	(*any.Any)(nil),                       // 4: google.protobuf.Any
}
var file_svr_cal_v1_cal_pub_proto_depIdxs = []int32{
	2, // 0: svr.cal.v1.GetStableCalReq.contextCondition:type_name -> svr.cal.v1.GetStableCalReq.ContextConditionEntry
	3, // 1: svr.cal.v1.GetStableCalRes.cells:type_name -> svr.cal.v1.GetStableCalRes.CellValueItem
	4, // 2: svr.cal.v1.GetStableCalReq.ContextConditionEntry.value:type_name -> google.protobuf.Any
	0, // 3: svr.cal.v1.CalPubSvr.GetStableCal:input_type -> svr.cal.v1.GetStableCalReq
	1, // 4: svr.cal.v1.CalPubSvr.GetStableCal:output_type -> svr.cal.v1.GetStableCalRes
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_svr_cal_v1_cal_pub_proto_init() }
func file_svr_cal_v1_cal_pub_proto_init() {
	if File_svr_cal_v1_cal_pub_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_svr_cal_v1_cal_pub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableCalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cal_v1_cal_pub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableCalRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svr_cal_v1_cal_pub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStableCalRes_CellValueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svr_cal_v1_cal_pub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svr_cal_v1_cal_pub_proto_goTypes,
		DependencyIndexes: file_svr_cal_v1_cal_pub_proto_depIdxs,
		MessageInfos:      file_svr_cal_v1_cal_pub_proto_msgTypes,
	}.Build()
	File_svr_cal_v1_cal_pub_proto = out.File
	file_svr_cal_v1_cal_pub_proto_rawDesc = nil
	file_svr_cal_v1_cal_pub_proto_goTypes = nil
	file_svr_cal_v1_cal_pub_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CalPubSvrClient is the client API for CalPubSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CalPubSvrClient interface {
	// GetStableCal 固定计算
	GetStableCal(ctx context.Context, in *GetStableCalReq, opts ...grpc.CallOption) (*GetStableCalRes, error)
}

type calPubSvrClient struct {
	cc grpc.ClientConnInterface
}

func NewCalPubSvrClient(cc grpc.ClientConnInterface) CalPubSvrClient {
	return &calPubSvrClient{cc}
}

func (c *calPubSvrClient) GetStableCal(ctx context.Context, in *GetStableCalReq, opts ...grpc.CallOption) (*GetStableCalRes, error) {
	out := new(GetStableCalRes)
	err := c.cc.Invoke(ctx, "/svr.cal.v1.CalPubSvr/GetStableCal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalPubSvrServer is the server API for CalPubSvr service.
type CalPubSvrServer interface {
	// GetStableCal 固定计算
	GetStableCal(context.Context, *GetStableCalReq) (*GetStableCalRes, error)
}

// UnimplementedCalPubSvrServer can be embedded to have forward compatible implementations.
type UnimplementedCalPubSvrServer struct {
}

func (*UnimplementedCalPubSvrServer) GetStableCal(context.Context, *GetStableCalReq) (*GetStableCalRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStableCal not implemented")
}

func RegisterCalPubSvrServer(s *grpc.Server, srv CalPubSvrServer) {
	s.RegisterService(&_CalPubSvr_serviceDesc, srv)
}

func _CalPubSvr_GetStableCal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStableCalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalPubSvrServer).GetStableCal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svr.cal.v1.CalPubSvr/GetStableCal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalPubSvrServer).GetStableCal(ctx, req.(*GetStableCalReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _CalPubSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svr.cal.v1.CalPubSvr",
	HandlerType: (*CalPubSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStableCal",
			Handler:    _CalPubSvr_GetStableCal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svr/cal/v1/cal.pub.proto",
}
